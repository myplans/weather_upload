{"version":3,"sources":["app_component/weather.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","align","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","s","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec73acff.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Weather = (props)=>\r\n{\r\n    return(\r\n      <div className=\"container text-light\" >\r\n          <div className=\"cards pt-4\" align=\"center\">\r\n              <h1>\r\n                  {props.city}\r\n                  </h1>\r\n              <h5 className=\"py-4\">\r\n                  <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n\r\n              </h5>\r\n              {props.temp_celsius ? (\r\n              <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n              ):null}\r\n             {/**Show max and min temp */} \r\n             {minmaxTemp(props.temp_min,props.temp_max)}\r\n             <h4 className=\"py-3\">{props.description}</h4>\r\n          </div>\r\n     </div>\r\n\r\n    )\r\n}\r\nfunction minmaxTemp(min,max)\r\n{ \r\n    if(min && max){\r\n    return(\r\n        <h3>\r\n         <span className=\"px-4\">{min}&deg;</span>\r\n         <span className=\"px-4\">{max}&deg;</span>\r\n        </h3>\r\n    );\r\n    }\r\n}\r\n\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport \"./form.style.css\";\r\n const Form = props=>{\r\n     return(\r\n\r\n     <div className=\"Container\" align=\"center\">\r\n         <div>{props.error ? error():null}</div>\r\n         <form onSubmit={props.loadweather}>\r\n         <div className=\"row\">\r\n            <div className=\"col-md-3 offset-md-2\">\r\n               <input type=\"text\" \r\n               className=\"form-control\" \r\n               name=\"city\"s\r\n                autoComplete=\"off\"\r\n                placeholder=\"City\"  />\r\n                </div>\r\n            <div className=\"col-md-3\">\r\n              <input type=\"text\" className=\"form-control\" name=\"country\" \r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3 mt-md-0 py-4 text-md-left\"> \r\n                <button className=\"btn btn-warning\">GET WEATHER</button>\r\n\r\n            </div>\r\n         </div>\r\n         </form>\r\n     </div>\r\n\r\n     );\r\n\r\n };\r\n function error(){\r\n     return(\r\n         <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n             Please Enter City And Country Names Only\r\n         </div>\r\n     )\r\n }\r\n\r\n export default Form;","import Weather from \"./app_component/weather\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from \"./app_component/form.component\";\nimport { Component } from \"react\";\n // api call api.openweathermap.org/data/2.5/weather?q=London&appid={API key}\nconst API_key=\"49a80a5a8b829ea569291611f80f06df\"\nclass App extends  Component{\n  constructor(){\n    super();\n    this.state={\n    city:undefined,\n    country:undefined,\n    icon:undefined,\n    main:undefined,\n    celsius : undefined,\n    temp_max : undefined,\n    temp_min : undefined,\n    description : \"\",\n    error:false\n    \n    };\n    \n    this.weatherIcon={\n      Thunderstorm : \"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere : \"wi-fog\",\n      Clear : \"wi-day-sunny\",\n      Clouds : \"wi-day-fog\"\n\n    }\n    \n  }\n  calCelsius(temp){\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n  get_WeatherIcon(icons,rangeId)\n  {\n    switch(true){\n      case rangeId >=200 && rangeId <= 232:\n      this.setState({icon:this.weatherIcon.Thunderstorm});\n         break; \n         case rangeId >=300 && rangeId <= 321:\n      this.setState({icon:this.weatherIcon.Drizzle});\n         break; \n         case rangeId >=500 && rangeId <= 531:\n      this.setState({icon:this.weatherIcon.Rain});\n         break; \n         case rangeId >=600 && rangeId <= 622:\n      this.setState({icon:this.weatherIcon.Snow});\n         break; \n         case rangeId >=701 && rangeId <= 781:\n      this.setState({icon:this.weatherIcon.Atmosphere});\n         break;\n         case rangeId ==800:\n          this.setState({icon:this.weatherIcon.Clear});\n             break; \n             case rangeId >=801 && rangeId <= 804:\n              this.setState({icon:this.weatherIcon.Clouds});\n                 break;\n                 default:\n                  this.setState({icon:this.weatherIcon.Clouds});\n\n\n    }\n  }\n\n  getWeather = async(e)=>{\n  e.preventDefault();\n  const city  = e.target.elements.city.value;\n  const country  = e.target.elements.country.value;\n   try{\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n    const response = await api_call.json();\n    console.log(response);\n    this.setState({\n      city : `${response.name},${response.sys.country}`,\n      \n      celsius: this.calCelsius(response.main.temp),\n      temp_max : this.calCelsius(response.main.temp_max),\n      temp_min : this.calCelsius(response.main.temp_min),\n      description : response.weather[0].description,\n      error : false\n      \n    })\n    this.get_WeatherIcon(this.weatherIcon,response.weather[0].id)\n   }\n   catch(error){\n    this.setState({error:true});\n  }\n  \n  };\n  render()\n  {\n    return(\n    <div className=\"App\">\n     <Form loadweather={this.getWeather} error={this.state.error} />\n    <Weather\n     city={this.state.city} \n     country={this.state.country}\n      temp_celsius={this.state.celsius}\n      temp_max={this.state.temp_max}\n      temp_min={this.state.temp_min}\n      description={this.state.description}\n      weatherIcon={this.state.icon}\n      \n      />\n  </div>\n  );\n  }\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}